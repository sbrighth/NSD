/***************************************************************************
**
** Copyright (C) 2013 BlackBerry Limited. All rights reserved.
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtBluetooth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include <qbluetoothuuid.h>

#include "deviceinfo.h"

DeviceInfo::DeviceInfo(const QBluetoothDeviceInfo &d)
{
    m_device = d;
    controller = Q_NULLPTR;
    connected = false;
}

DeviceInfo::~DeviceInfo()
{
    qDeleteAll(services);
    services.clear();
    services_map.clear();
}


QVariant DeviceInfo::getServices()
{
    return QVariant::fromValue(services);
}

ServiceInfo *DeviceInfo::getService(QString uuid)
{
    return services_map[uuid];
}

QString DeviceInfo::getAddress() const
{
#ifdef Q_OS_MAC
    // On OS X and iOS we do not have addresses,
    // only unique UUIDs generated by Core Bluetooth.
    return device.deviceUuid().toString();
#else
    return m_device.address().toString();
#endif
}

QString DeviceInfo::getName() const
{
    return m_device.name();
}

void DeviceInfo::scanServices()
{
    if (!m_device.isValid()) {
        qWarning() << "Not a valid device";
        return;
    }

    qDeleteAll(services);
    services.clear();
    services_map.clear();
    emit servicesUpdated(getAddress());
    setUpdate("Connecting to device...");

    if(controller)
    {
        controller->disconnectFromDevice();
        delete controller;
        controller = nullptr;
    }

    //! [les-controller-1]
    if (!controller) {
        // Connecting signals and slots for connecting to LE services.
        controller = QLowEnergyController::createCentral(m_device);

        connect(controller, &QLowEnergyController::connected,
                this, &DeviceInfo::deviceConnected);
        connect(controller, QOverload<QLowEnergyController::Error>::of(&QLowEnergyController::error),
                this, &DeviceInfo::errorReceived);
        connect(controller, &QLowEnergyController::disconnected,
                this, &DeviceInfo::deviceDisconnected);
        connect(controller, &QLowEnergyController::serviceDiscovered,
                this, &DeviceInfo::addLowEnergyService);
        connect(controller, &QLowEnergyController::discoveryFinished,
                this, &DeviceInfo::serviceScanDone);
    }

    if (randomAddress)
        controller->setRemoteAddressType(QLowEnergyController::RandomAddress);
    else
        controller->setRemoteAddressType(QLowEnergyController::PublicAddress);

    controller->connectToDevice();
    //! [les-controller-1]
}


void DeviceInfo::disconnectFromDevice()
{
    // UI always expects disconnect() signal when calling this signal
    // TODO what is really needed is to extend state() to a multi value
    // and thus allowing UI to keep track of controller progress in addition to
    // device scan progress

    if(controller)
    {
        if (controller->state() != QLowEnergyController::UnconnectedState)
            controller->disconnectFromDevice();
        else
            deviceDisconnected();
    }
}

QString DeviceInfo::getServiceUpdate()
{
    return message;
}

bool DeviceInfo::hasControllerError() const
{
    return (controller && controller->error() != QLowEnergyController::NoError);
}

bool DeviceInfo::isRandomAddress() const
{
    return randomAddress;
}

void DeviceInfo::setRandomAddress(bool newValue)
{
    randomAddress = newValue;
}

void DeviceInfo::setUpdate(const QString &message)
{
    this->message = message;
    emit servicesUpdateChanged(getAddress());
}

void DeviceInfo::addLowEnergyService(const QBluetoothUuid &serviceUuid)
{
    //! [les-service-1]
    QLowEnergyService *service = controller->createServiceObject(serviceUuid);
    if (!service) {
        qWarning() << "Cannot create service for uuid";
        return;
    }
    //! [les-service-1]
    ServiceInfo *serv = new ServiceInfo(service, getAddress());
    services.append(serv);
    services_map.insert(serv->getUuid(), serv);
    connect(serv, SIGNAL(characteristicListUpdated(QString, QString)), this, SIGNAL(characteristicListUpdated(QString, QString)));
    connect(serv, SIGNAL(characteristicValueChanged(QString, QString, QString, QByteArray)), this, SIGNAL(characteristicValueChanged(QString, QString, QString, QByteArray)));
    connect(serv, SIGNAL(characteristicValueUpdated(QString, QString, QString)), this, SIGNAL(characteristicValueUpdated(QString, QString, QString)));
    connect(serv, SIGNAL(descriptorValueUpdated(QString, QString, QString)), this, SIGNAL(descriptorValueUpdated(QString, QString, QString)));

    emit servicesUpdated(getAddress());
}

void DeviceInfo::deviceConnected()
{
    setUpdate("Back\n(Discovering services...)");
    connected = true;
    //! [les-service-2]
    controller->discoverServices();
    //! [les-service-2]
}

void DeviceInfo::errorReceived(QLowEnergyController::Error /*error*/)
{
    qWarning() << "Error: " << controller->errorString();
    setUpdate(QString("%1").arg(controller->errorString()));
}

void DeviceInfo::serviceScanDone()
{
    setUpdate("Service scan done!");
    // force UI in case we didn't find anything
    if (services.isEmpty())
        emit servicesUpdated(getAddress());

    emit servicesUpdateFinished(getAddress());
}

void DeviceInfo::deviceDisconnected()
{
    qWarning() << "Disconnect from device";
    emit disconnected(getAddress());
}
